import React, { useState, useEffect, useMemo } from 'react';
import {
  Box,
  Typography,
  Grid,
  TextField,
  Button,
  IconButton,
  Divider,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  Chip,
  Alert,
  Snackbar,
  Fade,
  Slide,
  Zoom,
  useTheme,
  useMediaQuery,
  Stack,
  InputAdornment,
  Paper,
  Avatar,
  List,
  ListItem,
  ListItemIcon,
  ListItemText,
  ListItemSecondaryAction,
  Tooltip,
  LinearProgress,
  Tabs,
  Tab,
  ToggleButton,
  ToggleButtonGroup,
  Drawer,
  CardContent,
  CardHeader,
  Fab,
  Menu,
  MenuItem,
  Select,
  FormControl,
  InputLabel,
  Switch,
  FormControlLabel,
  Skeleton,
  Backdrop,
  CircularProgress,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  DialogContentText
} from '@mui/material';
import {
  Add as AddIcon,
  Delete as DeleteIcon,
  ExpandMore as ExpandMoreIcon,
  Save as SaveIcon,
  PieChart as PieChartIcon,
  AttachMoney as MoneyIcon,
  TrendingUp as TrendingUpIcon,
  TrendingDown as TrendingDownIcon,
  Home as HomeIcon,
  DirectionsCar as CarIcon,
  Restaurant as FoodIcon,
  LocalHospital as HealthIcon,
  Movie as EntertainmentIcon,
  School as EducationIcon,
  ShoppingCart as ShoppingIcon,
  Flight as TravelIcon,
  Build as UtilitiesIcon,
  ChildCare as ChildCareIcon,
  MoreHoriz as OtherIcon,
  AccountBalance as SavingsIcon,
  Receipt as DebtIcon,
  Receipt,
  AccountCircle,
  Warning as WarningIcon,
  FilterList as FilterIcon,
  Timeline as TimelineIcon,
  BarChart as BarChartIcon,
  DonutLarge as DonutIcon,
  Analytics as AnalyticsIcon,
  Help as HelpIcon,
  Info as InfoIcon,
  DateRange as DateRangeIcon,
  ViewWeek as ViewWeekIcon,
  ViewModule as ViewMonthIcon,
  ViewQuilt as ViewQuarterIcon,
  Refresh as RefreshIcon,
  Download as ExportIcon,
  Visibility as VisibilityIcon,
  VisibilityOff as VisibilityOffIcon,
  Settings as SettingsIcon,
  Edit as EditIcon,
  Check as CheckIcon,
  Close as CloseIcon,
  Lock as LockIcon
} from '@mui/icons-material';
import axios from '../utils/axios';
import * as XLSX from 'xlsx';
import { useAuth } from '../contexts/AuthContext';
import { useTheme as useCustomTheme } from '../contexts/ThemeContext';
import Card from './common/Card';
import Chart from './common/Chart';
import Loading from './common/Loading';
import Input from './common/Input';
import { Button as CustomButton } from './common/Button';

function MonthlyBudget() {
  const { user } = useAuth();
  const { isDarkMode } = useCustomTheme();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));
  
  const [formData, setFormData] = useState({
    income: '',
    housing: '',
    debt_payments: '',
    transportation: '',
    food: '',
    healthcare: '',
    entertainment: '',
    shopping: '',
    travel: '',
    education: '',
    utilities: '',
    childcare: '',
    other: ''
  });

  const [additionalItems, setAdditionalItems] = useState([]);
  const [savingsItems, setSavingsItems] = useState([]);
  const [expenseChartData, setExpenseChartData] = useState(null);
  const [incomeChartData, setIncomeChartData] = useState(null);
  const [trendChartData, setTrendChartData] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);
  const [successMessage, setSuccessMessage] = useState('');
  const [showSuccessSnackbar, setShowSuccessSnackbar] = useState(false);
  const [showErrorSnackbar, setShowErrorSnackbar] = useState(false);

  // New enhanced state variables
  const [activeTab, setActiveTab] = useState(0);
  const [chartType, setChartType] = useState('pie');
  const [timeFilter, setTimeFilter] = useState('month');
  const [selectedMonth, setSelectedMonth] = useState(new Date().getMonth());
  const [selectedYear, setSelectedYear] = useState(new Date().getFullYear());
  const [showSidebar, setShowSidebar] = useState(false);
  const [animationEnabled, setAnimationEnabled] = useState(true);
  const [showTooltips, setShowTooltips] = useState(true);
  const [editMode, setEditMode] = useState(false);
  const [compactView, setCompactView] = useState(false);
  const [showAdvancedMetrics, setShowAdvancedMetrics] = useState(false);
  const [budgetHistory, setBudgetHistory] = useState([]);
  const [filterAnchorEl, setFilterAnchorEl] = useState(null);
  const [chartSettings, setChartSettings] = useState({
    showLegend: true,
    showLabels: true,
    showPercentages: true,
    showValues: true
  });

  const categoryIcons = {
    housing: <HomeIcon />,
    transportation: <CarIcon />,
    food: <FoodIcon />,
    healthcare: <HealthIcon />,
    entertainment: <EntertainmentIcon />,
    shopping: <ShoppingIcon />,
    travel: <TravelIcon />,
    education: <EducationIcon />,
    utilities: <UtilitiesIcon />,
    childcare: <ChildCareIcon />,
    debt_payments: <DebtIcon />,
    other: <OtherIcon />
  };

  const categoryLabels = {
    housing: 'Housing',
    transportation: 'Transportation',
    food: 'Food',
    healthcare: 'Healthcare',
    entertainment: 'Entertainment',
    shopping: 'Shopping',
    travel: 'Travel',
    education: 'Education',
    utilities: 'Utilities',
    childcare: 'Childcare',
    debt_payments: 'Debt Payments',
    other: 'Other'
  };

  useEffect(() => {
    loadBudgetData();
  }, []);

  useEffect(() => {
    updateChartData();
  }, [formData, additionalItems, savingsItems]);

  const loadBudgetData = async () => {
    try {
      setIsLoading(true);
      const response = await axios.get('/api/budgets/');
      
      if (response.data && response.data.length > 0) {
        const budget = response.data[0];
        setFormData({
          income: budget.income || '',
          housing: budget.housing || '',
          debt_payments: budget.debt_payments || '',
          transportation: budget.transportation || '',
          food: budget.food || '',
          healthcare: budget.healthcare || '',
          entertainment: budget.entertainment || '',
          shopping: budget.shopping || '',
          travel: budget.travel || '',
          education: budget.education || '',
          utilities: budget.utilities || '',
          childcare: budget.childcare || '',
          other: budget.other || ''
        });
        
        setAdditionalItems(budget.additional_items || []);
        setSavingsItems(budget.savings_items || budget.savings || []);
      }
    } catch (error) {
      console.error('Error loading budget data:', error);
      setError('Failed to load budget data');
      setShowErrorSnackbar(true);
    } finally {
      setIsLoading(false);
    }
  };

  const updateChartData = () => {
    // Enhanced color palette with better contrast and accessibility
    const colorPalette = [
      '#FF6B6B', // Red
      '#4ECDC4', // Teal
      '#45B7D1', // Blue
      '#96CEB4', // Mint
      '#FFEAA7', // Yellow
      '#DDA0DD', // Plum
      '#F39C12', // Orange
      '#9B59B6', // Purple
      '#1ABC9C', // Turquoise
      '#E74C3C', // Crimson
      '#3498DB', // Light Blue
      '#2ECC71', // Emerald
      '#F1C40F', // Bright Yellow
      '#E67E22', // Carrot
      '#8E44AD', // Wisteria
      '#16A085'  // Green Sea
    ];

    // Expense Chart Data
    const expenseLabels = [];
    const expenseData = [];
    const expenseColors = [];
    
    let colorIndex = 0;
    Object.entries(formData).forEach(([key, value]) => {
      if (key !== 'income' && value && parseFloat(value) > 0) {
        expenseLabels.push(categoryLabels[key] || key);
        expenseData.push(parseFloat(value));
        expenseColors.push(colorPalette[colorIndex % colorPalette.length]);
        colorIndex++;
      }
    });

    additionalItems.forEach(item => {
      if (item.name && item.amount && parseFloat(item.amount) > 0) {
        expenseLabels.push(item.name);
        expenseData.push(parseFloat(item.amount));
        expenseColors.push(colorPalette[colorIndex % colorPalette.length]);
        colorIndex++;
      }
    });

    if (expenseData.length > 0) {
      setExpenseChartData({
        labels: expenseLabels,
        datasets: [{
          data: expenseData,
          backgroundColor: expenseColors,
          borderColor: expenseColors.map(color => color + '80'),
          borderWidth: 2,
          hoverBorderWidth: 3,
          hoverOffset: 4
        }]
      });
    } else {
      setExpenseChartData(null);
    }

    // Income Chart Data
    const incomeLabels = [];
    const incomeData = [];
    const incomeColors = [];
    
    const totalIncome = parseFloat(formData.income) || 0;
    const totalExpenses = calculateTotalExpenses();
    const totalSavings = calculateTotalSavings();
    const remaining = totalIncome - totalExpenses - totalSavings;
    
    if (totalExpenses > 0) {
      incomeLabels.push('Expenses');
      incomeData.push(totalExpenses);
      incomeColors.push('#FF6B6B');
    }
    
    if (totalSavings > 0) {
      incomeLabels.push('Savings');
      incomeData.push(totalSavings);
      incomeColors.push('#4ECDC4');
    }
    
    if (remaining > 0) {
      incomeLabels.push('Remaining');
      incomeData.push(remaining);
      incomeColors.push('#96CEB4');
    } else if (remaining < 0) {
      incomeLabels.push('Over Budget');
      incomeData.push(Math.abs(remaining));
      incomeColors.push('#E74C3C');
    }

    if (incomeData.length > 0) {
      setIncomeChartData({
        labels: incomeLabels,
        datasets: [{
          data: incomeData,
          backgroundColor: incomeColors,
          borderColor: incomeColors.map(color => color + '80'),
          borderWidth: 2,
          hoverBorderWidth: 3,
          hoverOffset: 4
        }]
      });
    } else {
      setIncomeChartData(null);
    }

    // Trend Chart Data for time-based analysis
    updateTrendChart();
  };

  const updateTrendChart = () => {
    // Generate mock trend data for demonstration
    const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
    const currentMonth = new Date().getMonth();
    const trendLabels = [];
    const incomeData = [];
    const expenseData = [];
    const savingsData = [];

    for (let i = 0; i < 12; i++) {
      const monthIndex = (currentMonth - 11 + i + 12) % 12;
      trendLabels.push(months[monthIndex]);
      
      // Generate sample data with some variation
      const baseIncome = parseFloat(formData.income) || 5000;
      const baseExpenses = calculateTotalExpenses();
      const baseSavings = calculateTotalSavings();
      
      incomeData.push(baseIncome + (Math.random() - 0.5) * 1000);
      expenseData.push(baseExpenses + (Math.random() - 0.5) * 500);
      savingsData.push(baseSavings + (Math.random() - 0.5) * 200);
    }

    setTrendChartData({
      labels: trendLabels,
      datasets: [
        {
          label: 'Income',
          data: incomeData,
          borderColor: '#2ECC71',
          backgroundColor: '#2ECC71' + '20',
          fill: false,
          tension: 0.4
        },
        {
          label: 'Expenses',
          data: expenseData,
          borderColor: '#E74C3C',
          backgroundColor: '#E74C3C' + '20',
          fill: false,
          tension: 0.4
        },
        {
          label: 'Savings',
          data: savingsData,
          borderColor: '#3498DB',
          backgroundColor: '#3498DB' + '20',
          fill: false,
          tension: 0.4
        }
      ]
    });
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const addNewItem = () => {
    setAdditionalItems([...additionalItems, { name: '', amount: '' }]);
  };

  const removeItem = (index) => {
    setAdditionalItems(additionalItems.filter((_, i) => i !== index));
  };

  const updateAdditionalItem = (index, field, value) => {
    const updated = [...additionalItems];
    updated[index][field] = value;
    setAdditionalItems(updated);
  };

  const addNewSavingsItem = () => {
    setSavingsItems([...savingsItems, { name: '', amount: '' }]);
  };

  const removeSavingsItem = (index) => {
    setSavingsItems(savingsItems.filter((_, i) => i !== index));
  };

  const updateSavingsItem = (index, field, value) => {
    const updated = [...savingsItems];
    updated[index][field] = value;
    setSavingsItems(updated);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    try {
      setIsLoading(true);
      setError(null);
      
      // Prepare data for submission
      const budgetData = {
        ...formData,
        additional_items: additionalItems,
        savings_items: savingsItems,
        month: selectedMonth,
        year: selectedYear
      };
      
      // Check if budget exists for current month/year
      const existingBudgetsResponse = await axios.get('/api/budgets/');
      const existingBudget = existingBudgetsResponse.data.find(
        budget => budget.month === selectedMonth && budget.year === selectedYear
      );
      
      let response;
      if (existingBudget) {
        // Update existing budget
        response = await axios.put(`/api/budgets/${existingBudget.id}/`, budgetData);
      } else {
        // Create new budget
        response = await axios.post('/api/budgets/', budgetData);
      }
      
      if (response.status === 200 || response.status === 201) {
        setSuccessMessage('Budget saved successfully!');
        setShowSuccessSnackbar(true);
        
        // Refresh the data
        await loadBudgetData();
      }
    } catch (error) {
      console.error('Error saving budget:', error);
      setError(error.response?.data?.message || 'Failed to save budget data');
      setShowErrorSnackbar(true);
    } finally {
      setIsLoading(false);
    }
  };

  const calculateTotalIncome = () => {
    const baseIncome = parseFloat(formData.income) || 0;
    const additionalIncome = savingsItems?.reduce((total, item) => {
      // Only count positive amounts as additional income
      const amount = parseFloat(item.amount) || 0;
      return total + (amount > 0 ? amount : 0);
    }, 0) || 0;
    return baseIncome + additionalIncome;
  };

  const calculateTotalExpenses = () => {
    let total = 0;
    Object.entries(formData).forEach(([key, value]) => {
      if (key !== 'income' && value) {
        total += parseFloat(value) || 0;
      }
    });
    additionalItems.forEach(item => {
      total += parseFloat(item.amount) || 0;
    });
    return total;
  };

  const calculateTotalSavings = () => {
    // Savings should be separate from income
    return savingsItems?.reduce((total, item) => {
      const amount = parseFloat(item.amount) || 0;
      return total + (amount > 0 ? amount : 0);
    }, 0) || 0;
  };

  const calculateRemaining = () => {
    const totalIncome = calculateTotalIncome();
    const totalExpenses = calculateTotalExpenses();
    const totalSavings = calculateTotalSavings();
    
    // Remaining = Income - Expenses - Savings
    return totalIncome - totalExpenses - totalSavings;
  };

  const formatCurrency = (amount) => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD',
      minimumFractionDigits: 0,
      maximumFractionDigits: 0
    }).format(amount);
  };

  // Helper functions for enhanced features
  const handleTabChange = (event, newValue) => {
    console.log('Tab changed from', activeTab, 'to', newValue);
    setActiveTab(newValue);
  };

  const handleTimeFilterChange = (event, newFilter) => {
    if (newFilter !== null) {
      setTimeFilter(newFilter);
      updateTrendChart();
    }
  };

  const handleChartTypeChange = (event, newType) => {
    if (newType !== null) {
      setChartType(newType);
    }
  };

  const toggleSidebar = () => {
    setShowSidebar(!showSidebar);
  };

  const handleFilterMenuOpen = (event) => {
    setFilterAnchorEl(event.currentTarget);
  };

  const handleFilterMenuClose = () => {
    setFilterAnchorEl(null);
  };

  const exportData = () => {
    try {
      // Create a new workbook
      const workbook = XLSX.utils.book_new();
      
      // Summary sheet
      const summaryData = [
        ['Financial Summary', ''],
        ['', ''],
        ['Category', 'Amount'],
        ['Total Income', calculateTotalIncome()],
        ['Total Expenses', calculateTotalExpenses()],
        ['Total Savings', calculateTotalSavings()],
        ['Remaining/Deficit', calculateRemaining()],
        ['', ''],
        ['Budget Health', remaining >= 0 ? 'Healthy' : 'Over Budget'],
        ['Savings Rate', `${((calculateTotalSavings() / calculateTotalIncome()) * 100).toFixed(1)}%`],
        ['Expense Ratio', `${((calculateTotalExpenses() / calculateTotalIncome()) * 100).toFixed(1)}%`]
      ];
      
      const summarySheet = XLSX.utils.aoa_to_sheet(summaryData);
      XLSX.utils.book_append_sheet(workbook, summarySheet, 'Summary');
      
      // Income sheet
      const incomeData = [
        ['Income Details', ''],
        ['', ''],
        ['Source', 'Amount'],
        ['Monthly Income', parseFloat(formData.income) || 0]
      ];
      
      const incomeSheet = XLSX.utils.aoa_to_sheet(incomeData);
      XLSX.utils.book_append_sheet(workbook, incomeSheet, 'Income');
      
      // Expenses sheet
      const expenseData = [
        ['Expense Details', ''],
        ['', ''],
        ['Category', 'Amount']
      ];
      
      // Add regular expenses
      Object.entries(formData).forEach(([key, value]) => {
        if (key !== 'income' && value) {
          expenseData.push([categoryLabels[key] || key, parseFloat(value) || 0]);
        }
      });
      
      // Add additional expenses
      additionalItems.forEach(item => {
        if (item.name && item.amount) {
          expenseData.push([item.name, parseFloat(item.amount) || 0]);
        }
      });
      
      const expenseSheet = XLSX.utils.aoa_to_sheet(expenseData);
      XLSX.utils.book_append_sheet(workbook, expenseSheet, 'Expenses');
      
      // Savings sheet
      const savingsData = [
        ['Savings & Investments', ''],
        ['', ''],
        ['Goal/Investment', 'Amount']
      ];
      
      savingsItems.forEach(item => {
        if (item.name && item.amount) {
          savingsData.push([item.name, parseFloat(item.amount) || 0]);
        }
      });
      
      const savingsSheet = XLSX.utils.aoa_to_sheet(savingsData);
      XLSX.utils.book_append_sheet(workbook, savingsSheet, 'Savings');
      
      // Generate Excel file
      const excelBuffer = XLSX.write(workbook, { bookType: 'xlsx', type: 'array' });
      const blob = new Blob([excelBuffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
      
      // Create download link
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `monthly-budget-${new Date().toISOString().split('T')[0]}.xlsx`;
      a.click();
      URL.revokeObjectURL(url);
      
      // Show success message
      setSuccessMessage('Budget exported successfully to Excel file!');
      setShowSuccessSnackbar(true);
      
    } catch (error) {
      console.error('Error exporting data:', error);
      setError('Error exporting data. Please try again.');
      setShowErrorSnackbar(true);
    }
  };

  const getAdvancedMetrics = () => {
    const totalIncome = calculateTotalIncome();
    const totalExpenses = calculateTotalExpenses();
    const totalSavings = calculateTotalSavings();
    
    return {
      savingsRate: totalIncome > 0 ? (totalSavings / totalIncome * 100).toFixed(1) : 0,
      expenseRatio: totalIncome > 0 ? (totalExpenses / totalIncome * 100).toFixed(1) : 0,
      largestExpense: Math.max(...Object.values(formData).filter(v => v !== formData.income).map(v => parseFloat(v) || 0)),
      budgetHealth: totalIncome > totalExpenses + totalSavings ? 'Healthy' : 'Over Budget',
      monthlyBuffer: totalIncome - totalExpenses - totalSavings
    };
  };

  const getChartOptions = (type) => {
    const baseOptions = {
      responsive: true,
      maintainAspectRatio: false,
      animation: animationEnabled,
      plugins: {
        legend: {
          display: chartSettings.showLegend,
          position: 'bottom',
          labels: {
            boxWidth: 12,
            padding: 15,
            usePointStyle: true,
            font: {
              size: 12
            },
            color: theme.palette.text.primary
          }
        },
        tooltip: {
          enabled: showTooltips,
          callbacks: {
            label: function(context) {
              const label = context.label || '';
              const value = context.raw || 0;
              const total = context.dataset.data.reduce((a, b) => a + b, 0);
              const percentage = ((value / total) * 100).toFixed(1);
              
              let labelText = `${label}: ${formatCurrency(value)}`;
              if (chartSettings.showPercentages) {
                labelText += ` (${percentage}%)`;
              }
              return labelText;
            }
          }
        }
      }
    };

    if (type === 'line') {
      return {
        ...baseOptions,
        scales: {
          x: {
            display: true,
            title: {
              display: true,
              text: 'Time Period',
              color: theme.palette.text.primary
            },
            ticks: {
              color: theme.palette.text.secondary
            },
            grid: {
              color: theme.palette.divider
            }
          },
          y: {
            display: true,
            title: {
              display: true,
              text: 'Amount ($)',
              color: theme.palette.text.primary
            },
            ticks: {
              color: theme.palette.text.secondary,
              callback: function(value) {
                return formatCurrency(value);
              }
            },
            grid: {
              color: theme.palette.divider
            }
          }
        }
      };
    }

    return baseOptions;
  };

  const remaining = calculateRemaining();
  const advancedMetrics = getAdvancedMetrics();

  // Debt Planning Functions
  const calculateDebtProjection = () => {
    const monthlyIncome = parseFloat(formData.income) || 0;
    const monthlyExpenses = calculateTotalExpenses();
    const monthlySavings = calculateTotalSavings();
    const totalDebtPayments = debts.reduce((sum, debt) => sum + (parseFloat(debt.minimumPayment) || 0), 0);
    
    const availableForDebt = monthlyIncome - monthlyExpenses - monthlySavings;
    const projectedMonths = 12;
    const projectionData = [];
    
    for (let i = 0; i < projectedMonths; i++) {
      projectionData.push({
        month: new Date(Date.now() + i * 30 * 24 * 60 * 60 * 1000).toLocaleDateString('en-US', { month: 'short', year: 'numeric' }),
        income: monthlyIncome,
        expenses: monthlyExpenses,
        savings: monthlySavings,
        debtPayments: totalDebtPayments,
        remaining: availableForDebt
      });
    }
    
    setDebtProjectionData({
      labels: projectionData.map(d => d.month),
      datasets: [
        {
          label: 'Income',
          data: projectionData.map(d => d.income),
          borderColor: '#2ECC71',
          backgroundColor: '#2ECC71' + '20',
          fill: false,
          tension: 0.4
        },
        {
          label: 'Expenses',
          data: projectionData.map(d => d.expenses),
          borderColor: '#E74C3C',
          backgroundColor: '#E74C3C' + '20',
          fill: false,
          tension: 0.4
        },
        {
          label: 'Debt Payments',
          data: projectionData.map(d => d.debtPayments),
          borderColor: '#F39C12',
          backgroundColor: '#F39C12' + '20',
          fill: false,
          tension: 0.4
        },
        {
          label: 'Available for Extra Payments',
          data: projectionData.map(d => d.remaining),
          borderColor: '#9B59B6',
          backgroundColor: '#9B59B6' + '20',
          fill: false,
          tension: 0.4
        }
      ]
    });
  };

  const calculatePayoffStrategies = () => {
    if (debts.length === 0) return;
    
    const monthlyIncome = parseFloat(formData.income) || 0;
    const monthlyExpenses = calculateTotalExpenses();
    const monthlySavings = calculateTotalSavings();
    const totalMinimumPayments = debts.reduce((sum, debt) => sum + (parseFloat(debt.minimumPayment) || 0), 0);
    const extraPayment = Math.max(0, monthlyIncome - monthlyExpenses - monthlySavings - totalMinimumPayments);
    
    // Debt Snowball Strategy (lowest balance first)
    const snowballDebts = [...debts].sort((a, b) => parseFloat(a.amount) - parseFloat(b.amount));
    const snowballStrategy = calculatePayoffTimeline(snowballDebts, extraPayment);
    
    // Debt Avalanche Strategy (highest interest rate first)
    const avalancheDebts = [...debts].sort((a, b) => parseFloat(b.interestRate) - parseFloat(a.interestRate));
    const avalancheStrategy = calculatePayoffTimeline(avalancheDebts, extraPayment);
    
    setPayoffStrategies({
      snowball: snowballStrategy,
      avalanche: avalancheStrategy
    });
  };

  const calculatePayoffTimeline = (sortedDebts, extraPayment) => {
    const timeline = [];
    let currentDebts = sortedDebts.map(debt => ({
      ...debt,
      remainingBalance: parseFloat(debt.amount),
      monthlyPayment: parseFloat(debt.minimumPayment)
    }));
    
    let month = 0;
    let totalInterestPaid = 0;
    let currentExtraPayment = extraPayment;
    
    while (currentDebts.some(debt => debt.remainingBalance > 0) && month < 360) { // Max 30 years
      month++;
      let monthlyInterest = 0;
      
      currentDebts.forEach(debt => {
        if (debt.remainingBalance > 0) {
          const monthlyInterestRate = parseFloat(debt.interestRate) / 100 / 12;
          const interestPayment = debt.remainingBalance * monthlyInterestRate;
          monthlyInterest += interestPayment;
          totalInterestPaid += interestPayment;
          
          const principalPayment = debt.monthlyPayment - interestPayment;
          debt.remainingBalance = Math.max(0, debt.remainingBalance - principalPayment);
        }
      });
      
      // Apply extra payment to the first debt with balance > 0
      if (currentExtraPayment > 0) {
        const targetDebt = currentDebts.find(debt => debt.remainingBalance > 0);
        if (targetDebt) {
          const extraApplied = Math.min(currentExtraPayment, targetDebt.remainingBalance);
          targetDebt.remainingBalance -= extraApplied;
          
          // If debt is paid off, add its minimum payment to extra payment pool
          if (targetDebt.remainingBalance === 0) {
            currentExtraPayment += targetDebt.monthlyPayment;
          }
        }
      }
      
      timeline.push({
        month,
        totalBalance: currentDebts.reduce((sum, debt) => sum + debt.remainingBalance, 0),
        totalInterestPaid,
        monthlyInterest
      });
    }
    
    return {
      timeline,
      totalMonths: month,
      totalInterestPaid,
      totalAmountPaid: sortedDebts.reduce((sum, debt) => sum + parseFloat(debt.amount), 0) + totalInterestPaid
    };
  };

  const getDebtTypeIcon = (type) => {
    const icons = {
      'credit-card': <Receipt />,
      'mortgage': <HomeIcon />,
      'auto': <CarIcon />,
      'student': <EducationIcon />,
      'personal': <MoneyIcon />,
      'other': <OtherIcon />
    };
    return icons[type] || <OtherIcon />;
  };

  // Update calculations when debts change
  useEffect(() => {
    calculateDebtProjection();
    calculatePayoffStrategies();
  }, [debts, formData, additionalItems, savingsItems]);

  return (
    <Box sx={{ p: 3, minHeight: '100vh', bgcolor: theme.palette.background.default }}>
      <Fade in={true} timeout={800}>
        <Box>
          {/* Header Section */}
          <Box sx={{ 
            display: 'flex', 
            justifyContent: 'space-between', 
            alignItems: 'center',
            mb: 4,
            flexWrap: 'wrap',
            gap: 2
          }}>
            <Typography variant="h3" sx={{ 
              fontWeight: 'bold', 
              color: theme.palette.text.primary,
              background: `linear-gradient(45deg, ${theme.palette.primary.main}, ${theme.palette.secondary.main})`,
              backgroundClip: 'text',
              textFillColor: 'transparent',
              display: 'flex',
              alignItems: 'center',
              gap: 1
            }}>
              <AnalyticsIcon sx={{ fontSize: 40, color: theme.palette.primary.main }} />
              Monthly Budget Planner
            </Typography>
            
            <Box sx={{ display: 'flex', gap: 1, alignItems: 'center' }}>
              <Tooltip title="Filter Options">
                <IconButton onClick={handleFilterMenuOpen} color="primary">
                  <FilterIcon />
                </IconButton>
              </Tooltip>
              
              <Tooltip title="Export Data">
                <IconButton onClick={exportData} color="primary">
                  <ExportIcon />
                </IconButton>
              </Tooltip>
              
              <Tooltip title="Refresh Data">
                <IconButton onClick={() => window.location.reload()} color="primary">
                  <RefreshIcon />
                </IconButton>
              </Tooltip>
              
              <Tooltip title="Settings">
                <IconButton onClick={toggleSidebar} color="primary">
                  <SettingsIcon />
                </IconButton>
              </Tooltip>
            </Box>
          </Box>

          {/* Time Filter Controls - Only show when Overview tab is active */}
          {activeTab === 1 && (
            <Slide in={true} direction="down" timeout={600}>
              <Card elevation={2} sx={{ mb: 3, overflow: 'visible' }}>
                <CardContent sx={{ pb: 2 }}>
                  <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, flexWrap: 'wrap' }}>
                    <Box>
                      <Typography variant="subtitle2" gutterBottom>
                        Time Period
                      </Typography>
                      <ToggleButtonGroup
                        value={timeFilter}
                        exclusive
                        onChange={handleTimeFilterChange}
                        aria-label="time filter"
                        size="small"
                      >
                        <ToggleButton value="week" aria-label="week">
                          <ViewWeekIcon sx={{ mr: 1 }} />
                          Week
                        </ToggleButton>
                        <ToggleButton value="month" aria-label="month">
                          <ViewMonthIcon sx={{ mr: 1 }} />
                          Month
                        </ToggleButton>
                        <ToggleButton value="quarter" aria-label="quarter">
                          <ViewQuarterIcon sx={{ mr: 1 }} />
                          Quarter
                        </ToggleButton>
                      </ToggleButtonGroup>
                    </Box>
                    
                    <Box>
                      <Typography variant="subtitle2" gutterBottom>
                        Chart Type
                      </Typography>
                      <ToggleButtonGroup
                        value={chartType}
                        exclusive
                        onChange={handleChartTypeChange}
                        aria-label="chart type"
                        size="small"
                      >
                        <ToggleButton value="pie" aria-label="pie">
                          <DonutIcon sx={{ mr: 1 }} />
                          Pie
                        </ToggleButton>
                        <ToggleButton value="bar" aria-label="bar">
                          <BarChartIcon sx={{ mr: 1 }} />
                          Bar
                        </ToggleButton>
                        <ToggleButton value="line" aria-label="line">
                          <TimelineIcon sx={{ mr: 1 }} />
                          Line
                        </ToggleButton>
                      </ToggleButtonGroup>
                    </Box>
                    
                    <Box>
                      <FormControlLabel
                        control={
                          <Switch
                            checked={showAdvancedMetrics}
                            onChange={(e) => setShowAdvancedMetrics(e.target.checked)}
                            color="primary"
                          />
                        }
                        label="Advanced Metrics"
                      />
                    </Box>
                  </Box>
                </CardContent>
              </Card>
            </Slide>
          )}

          {/* Tab Navigation */}
          <Card elevation={2} sx={{ mb: 3 }}>
            <Tabs 
              value={activeTab} 
              onChange={handleTabChange}
              variant="fullWidth"
              textColor="primary"
              indicatorColor="primary"
              sx={{
                '& .MuiTab-root': {
                  minHeight: 64,
                  fontSize: '1rem',
                  fontWeight: 'medium'
                }
              }}
            >
              <Tab 
                icon={<EditIcon />} 
                label="Budget Input" 
                iconPosition="start"
              />
              <Tab 
                icon={<PieChartIcon />} 
                label="Overview" 
                iconPosition="start"
              />
              <Tab 
                icon={<TimelineIcon />} 
                label="Trends" 
                iconPosition="start"
              />
              <Tab 
                icon={<AnalyticsIcon />} 
                label="Analytics" 
                iconPosition="start"
              />
            </Tabs>
          </Card>

          {/* Main Content with Tabs */}
          <Box sx={{ position: 'relative' }}>
            {/* Tab Panel 0: Budget Input */}
            {activeTab === 0 && (
              <Fade in={true} timeout={600}>
                <Grid container spacing={3}>
                  <Grid item xs={12} lg={8}>
                    <Card elevation={3} sx={{ 
                      background: `linear-gradient(135deg, ${theme.palette.background.paper} 0%, ${theme.palette.grey[50]} 100%)`,
                      borderRadius: 3
                    }}>
                      <CardHeader
                        title="Budget Planning"
                        subheader="Enter your monthly income, expenses, and savings goals"
                        action={
                          <IconButton onClick={() => setEditMode(!editMode)}>
                            {editMode ? <CheckIcon /> : <EditIcon />}
                          </IconButton>
                        }
                      />
                      <CardContent>
                        <form onSubmit={handleSubmit}>
                          {/* Income Section */}
                          <Zoom in={true} timeout={400}>
                            <Box sx={{ mb: 4 }}>
                              <Typography variant="h6" gutterBottom sx={{ 
                                display: 'flex', 
                                alignItems: 'center',
                                mb: 2,
                                color: theme.palette.success.main
                              }}>
                                <MoneyIcon sx={{ mr: 1 }} />
                                Monthly Income
                                <Tooltip title="Your total monthly income from all sources">
                                  <HelpIcon sx={{ ml: 1, fontSize: 16, color: theme.palette.text.secondary }} />
                                </Tooltip>
                              </Typography>
                              <Input
                                label="Monthly Income"
                                name="income"
                                value={formData.income}
                                onChange={handleInputChange}
                                type="number"
                                startAdornment={<InputAdornment position="start">$</InputAdornment>}
                                fullWidth
                                sx={{
                                  '& .MuiOutlinedInput-root': {
                                    borderRadius: 2,
                                    '&:hover': {
                                      transform: 'translateY(-2px)',
                                      boxShadow: theme.shadows[4]
                                    },
                                    transition: 'all 0.3s ease'
                                  }
                                }}
                              />
                            </Box>
                          </Zoom>

                          <Divider sx={{ my: 3 }} />

                          {/* Expenses Section */}
                          <Zoom in={true} timeout={600}>
                            <Box sx={{ mb: 4 }}>
                              <Typography variant="h6" gutterBottom sx={{ 
                                display: 'flex', 
                                alignItems: 'center',
                                mb: 2,
                                color: theme.palette.error.main
                              }}>
                                <TrendingDownIcon sx={{ mr: 1 }} />
                                Monthly Expenses
                                <Tooltip title="Your regular monthly expenses by category">
                                  <HelpIcon sx={{ ml: 1, fontSize: 16, color: theme.palette.text.secondary }} />
                                </Tooltip>
                              </Typography>
                              
                              <Grid container spacing={2}>
                                {Object.entries(formData).map(([key, value]) => {
                                  if (key === 'income') return null;
                                  return (
                                    <Grid item xs={12} sm={6} md={4} key={key}>
                                      <Slide in={true} direction="up" timeout={800 + Object.keys(formData).indexOf(key) * 100}>
                                        <Box>
                                          <Input
                                            label={categoryLabels[key]}
                                            name={key}
                                            value={value}
                                            onChange={handleInputChange}
                                            type="number"
                                            startAdornment={
                                              <InputAdornment position="start">
                                                <Avatar sx={{ 
                                                  width: 24, 
                                                  height: 24, 
                                                  bgcolor: 'transparent',
                                                  color: theme.palette.text.secondary
                                                }}>
                                                  {categoryIcons[key]}
                                                </Avatar>
                                              </InputAdornment>
                                            }
                                            fullWidth
                                            sx={{
                                              '& .MuiOutlinedInput-root': {
                                                borderRadius: 2,
                                                '&:hover': {
                                                  transform: 'translateY(-2px)',
                                                  boxShadow: theme.shadows[2]
                                                },
                                                transition: 'all 0.3s ease'
                                              }
                                            }}
                                          />
                                        </Box>
                                      </Slide>
                                    </Grid>
                                  );
                                })}
                              </Grid>

                              {/* Additional Expense Items */}
                              <Box sx={{ mt: 3 }}>
                                <Typography variant="subtitle1" gutterBottom>
                                  Additional Expenses
                                </Typography>
                                
                                <List>
                                  {additionalItems.map((item, index) => (
                                    <Slide in={true} direction="left" timeout={400 + index * 100} key={index}>
                                      <ListItem sx={{ px: 0 }}>
                                        <Grid container spacing={2} alignItems="center">
                                          <Grid item xs={12} sm={5}>
                                            <Input
                                              label="Expense Name"
                                              value={item.name}
                                              onChange={(e) => updateAdditionalItem(index, 'name', e.target.value)}
                                              fullWidth
                                            />
                                          </Grid>
                                          <Grid item xs={12} sm={5}>
                                            <Input
                                              label="Amount"
                                              value={item.amount}
                                              onChange={(e) => updateAdditionalItem(index, 'amount', e.target.value)}
                                              type="number"
                                              startAdornment={<InputAdornment position="start">$</InputAdornment>}
                                              fullWidth
                                            />
                                          </Grid>
                                          <Grid item xs={12} sm={2}>
                                            <IconButton 
                                              onClick={() => removeItem(index)}
                                              color="error"
                                              sx={{
                                                '&:hover': {
                                                  transform: 'scale(1.1)',
                                                  bgcolor: theme.palette.error.main + '10'
                                                }
                                              }}
                                            >
                                              <DeleteIcon />
                                            </IconButton>
                                          </Grid>
                                        </Grid>
                                      </ListItem>
                                    </Slide>
                                  ))}
                                </List>
                                
                                <Button
                                  startIcon={<AddIcon />}
                                  onClick={addNewItem}
                                  variant="outlined"
                                  sx={{ 
                                    mt: 1,
                                    borderRadius: 2,
                                    '&:hover': {
                                      transform: 'translateY(-2px)',
                                      boxShadow: theme.shadows[4]
                                    }
                                  }}
                                >
                                  Add Expense
                                </Button>
                              </Box>
                            </Box>
                          </Zoom>

                          <Divider sx={{ my: 3 }} />

                          {/* Savings Section */}
                          <Zoom in={true} timeout={800}>
                            <Box sx={{ mb: 4 }}>
                              <Typography variant="h6" gutterBottom sx={{ 
                                display: 'flex', 
                                alignItems: 'center',
                                mb: 2,
                                color: theme.palette.primary.main
                              }}>
                                <SavingsIcon sx={{ mr: 1 }} />
                                Savings & Investments
                                <Tooltip title="Your savings goals and investment contributions">
                                  <HelpIcon sx={{ ml: 1, fontSize: 16, color: theme.palette.text.secondary }} />
                                </Tooltip>
                              </Typography>
                              
                              <List>
                                {savingsItems.map((item, index) => (
                                  <Slide in={true} direction="right" timeout={400 + index * 100} key={index}>
                                    <ListItem sx={{ px: 0 }}>
                                      <Grid container spacing={2} alignItems="center">
                                        <Grid item xs={12} sm={5}>
                                          <Input
                                            label="Savings Goal"
                                            value={item.name}
                                            onChange={(e) => updateSavingsItem(index, 'name', e.target.value)}
                                            fullWidth
                                          />
                                        </Grid>
                                        <Grid item xs={12} sm={5}>
                                          <Input
                                            label="Amount"
                                            value={item.amount}
                                            onChange={(e) => updateSavingsItem(index, 'amount', e.target.value)}
                                            type="number"
                                            startAdornment={<InputAdornment position="start">$</InputAdornment>}
                                            fullWidth
                                          />
                                        </Grid>
                                        <Grid item xs={12} sm={2}>
                                          <IconButton 
                                            onClick={() => removeSavingsItem(index)}
                                            color="error"
                                            sx={{
                                              '&:hover': {
                                                transform: 'scale(1.1)',
                                                bgcolor: theme.palette.error.main + '10'
                                              }
                                            }}
                                          >
                                            <DeleteIcon />
                                          </IconButton>
                                        </Grid>
                                      </Grid>
                                    </ListItem>
                                  </Slide>
                                ))}
                              </List>
                              
                              <Button
                                startIcon={<AddIcon />}
                                onClick={addNewSavingsItem}
                                variant="outlined"
                                sx={{ 
                                  mt: 1,
                                  borderRadius: 2,
                                  '&:hover': {
                                    transform: 'translateY(-2px)',
                                    boxShadow: theme.shadows[4]
                                  }
                                }}
                              >
                                Add Savings Goal
                              </Button>
                            </Box>
                          </Zoom>

                          <Box sx={{ display: 'flex', justifyContent: 'flex-end', mt: 4 }}>
                            <CustomButton
                              variant="contained"
                              color="primary"
                              startIcon={<SaveIcon />}
                              type="submit"
                              size="large"
                              sx={{
                                borderRadius: 3,
                                px: 4,
                                py: 1.5,
                                '&:hover': {
                                  transform: 'translateY(-2px)',
                                  boxShadow: theme.shadows[8]
                                }
                              }}
                            >
                              Save Budget
                            </CustomButton>
                          </Box>
                        </form>
                      </CardContent>
                    </Card>
                  </Grid>

                  {/* Sidebar - Financial Overview */}
                  <Grid item xs={12} lg={4}>
                    <Slide in={true} direction="left" timeout={800}>
                      <Stack spacing={3}>
                        {/* Financial Overview Card */}
                        <Card elevation={3} sx={{ 
                          background: `linear-gradient(135deg, ${theme.palette.primary.main}15 0%, ${theme.palette.secondary.main}15 100%)`,
                          border: `1px solid ${theme.palette.divider}`,
                          borderRadius: 3
                        }}>
                          <CardHeader
                            title={
                              <Box sx={{ display: 'flex', alignItems: 'center' }}>
                                <PieChartIcon sx={{ mr: 1, color: theme.palette.primary.main }} />
                                Financial Overview
                              </Box>
                            }
                            action={
                              <Tooltip title="Toggle compact view">
                                <IconButton onClick={() => setCompactView(!compactView)}>
                                  {compactView ? <VisibilityIcon /> : <VisibilityOffIcon />}
                                </IconButton>
                              </Tooltip>
                            }
                          />
                          <CardContent>
                            <Grid container spacing={2}>
                              {/* Total Income */}
                              <Grid item xs={12} sm={6} md={3}>
                                <Zoom in={true} timeout={400}>
                                  <Box sx={{ 
                                    p: 2,
                                    bgcolor: theme.palette.success.main + '10',
                                    borderRadius: 3,
                                    border: `2px solid ${theme.palette.success.main}20`,
                                    textAlign: 'center',
                                    transition: 'all 0.3s ease',
                                    cursor: 'pointer',
                                    '&:hover': {
                                      transform: 'translateY(-4px)',
                                      boxShadow: `0 8px 32px ${theme.palette.success.main}30`
                                    }
                                  }}>
                                    <MoneyIcon sx={{ 
                                      fontSize: 28, 
                                      color: theme.palette.success.main,
                                      mb: 1
                                    }} />
                                    <Typography variant="h6" sx={{ 
                                      color: theme.palette.success.main,
                                      fontWeight: 'bold',
                                      mb: 0.5
                                    }}>
                                      {formatCurrency(calculateTotalIncome())}
                                    </Typography>
                                    <Typography variant="body2" sx={{ 
                                      color: theme.palette.text.secondary,
                                      fontWeight: 'medium'
                                    }}>
                                      Total Income
                                    </Typography>
                                  </Box>
                                </Zoom>
                              </Grid>
                              
                              {/* Total Expenses */}
                              <Grid item xs={12} sm={6} md={3}>
                                <Zoom in={true} timeout={600}>
                                  <Box sx={{ 
                                    p: 2,
                                    bgcolor: theme.palette.error.main + '10',
                                    borderRadius: 3,
                                    border: `2px solid ${theme.palette.error.main}20`,
                                    textAlign: 'center',
                                    transition: 'all 0.3s ease',
                                    cursor: 'pointer',
                                    '&:hover': {
                                      transform: 'translateY(-4px)',
                                      boxShadow: `0 8px 32px ${theme.palette.error.main}30`
                                    }
                                  }}>
                                    <TrendingDownIcon sx={{ 
                                      fontSize: 28, 
                                      color: theme.palette.error.main,
                                      mb: 1
                                    }} />
                                    <Typography variant="h6" sx={{ 
                                      color: theme.palette.error.main,
                                      fontWeight: 'bold',
                                      mb: 0.5
                                    }}>
                                      {formatCurrency(calculateTotalExpenses())}
                                    </Typography>
                                    <Typography variant="body2" sx={{ 
                                      color: theme.palette.text.secondary,
                                      fontWeight: 'medium'
                                    }}>
                                      Total Expenses
                                    </Typography>
                                  </Box>
                                </Zoom>
                              </Grid>
                              
                              {/* Total Savings */}
                              <Grid item xs={12} sm={6} md={3}>
                                <Zoom in={true} timeout={800}>
                                  <Box sx={{ 
                                    p: 2,
                                    bgcolor: theme.palette.primary.main + '10',
                                    borderRadius: 3,
                                    border: `2px solid ${theme.palette.primary.main}20`,
                                    textAlign: 'center',
                                    transition: 'all 0.3s ease',
                                    cursor: 'pointer',
                                    '&:hover': {
                                      transform: 'translateY(-4px)',
                                      boxShadow: `0 8px 32px ${theme.palette.primary.main}30`
                                    }
                                  }}>
                                    <SavingsIcon sx={{ 
                                      fontSize: 28, 
                                      color: theme.palette.primary.main,
                                      mb: 1
                                    }} />
                                    <Typography variant="h6" sx={{ 
                                      color: theme.palette.primary.main,
                                      fontWeight: 'bold',
                                      mb: 0.5
                                    }}>
                                      {formatCurrency(calculateTotalSavings())}
                                    </Typography>
                                    <Typography variant="body2" sx={{ 
                                      color: theme.palette.text.secondary,
                                      fontWeight: 'medium'
                                    }}>
                                      Total Savings
                                    </Typography>
                                  </Box>
                                </Zoom>
                              </Grid>
                              
                              {/* Remaining */}
                              <Grid item xs={12} sm={6} md={3}>
                                <Zoom in={true} timeout={1000}>
                                  <Box sx={{ 
                                    p: 2,
                                    bgcolor: remaining >= 0 ? theme.palette.success.main + '10' : theme.palette.warning.main + '10',
                                    borderRadius: 3,
                                    border: `2px solid ${remaining >= 0 ? theme.palette.success.main : theme.palette.warning.main}20`,
                                    textAlign: 'center',
                                    transition: 'all 0.3s ease',
                                    cursor: 'pointer',
                                    '&:hover': {
                                      transform: 'translateY(-4px)',
                                      boxShadow: `0 8px 32px ${remaining >= 0 ? theme.palette.success.main : theme.palette.warning.main}30`
                                    }
                                  }}>
                                    {remaining >= 0 ? 
                                      <TrendingUpIcon sx={{ 
                                        fontSize: 28, 
                                        color: theme.palette.success.main,
                                        mb: 1
                                      }} /> :
                                      <WarningIcon sx={{ 
                                        fontSize: 28, 
                                        color: theme.palette.warning.main,
                                        mb: 1
                                      }} />
                                    }
                                    <Typography variant="h6" sx={{ 
                                      color: remaining >= 0 ? theme.palette.success.main : theme.palette.warning.main,
                                      fontWeight: 'bold',
                                      mb: 0.5
                                    }}>
                                      {formatCurrency(remaining)}
                                    </Typography>
                                    <Typography variant="body2" sx={{ 
                                      color: theme.palette.text.secondary,
                                      fontWeight: 'medium'
                                    }}>
                                      {remaining >= 0 ? 'Remaining' : 'Over Budget'}
                                    </Typography>
                                  </Box>
                                </Zoom>
                              </Grid>
                            </Grid>
                            
                            {/* Progress Bar */}
                            <Box sx={{ mt: 3 }}>
                              <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>
                                <Typography variant="body2" sx={{ fontWeight: 'medium' }}>
                                  Budget Health
                                </Typography>
                                <Typography variant="body2" sx={{ fontWeight: 'medium' }}>
                                  {((calculateTotalExpenses() / calculateTotalIncome()) * 100).toFixed(1)}% of income spent
                                </Typography>
                              </Box>
                              <LinearProgress 
                                variant="determinate" 
                                value={Math.min((calculateTotalExpenses() / calculateTotalIncome()) * 100, 100)}
                                sx={{ 
                                  height: 12, 
                                  borderRadius: 6,
                                  backgroundColor: theme.palette.grey[300],
                                  '& .MuiLinearProgress-bar': {
                                    borderRadius: 6,
                                    backgroundColor: remaining >= 0 ? theme.palette.success.main : theme.palette.error.main
                                  }
                                }}
                              />
                            </Box>

                            {/* Advanced Metrics */}
                            {showAdvancedMetrics && (
                              <Fade in={true} timeout={600}>
                                <Box sx={{ mt: 3 }}>
                                  <Typography variant="subtitle1" gutterBottom>
                                    Advanced Metrics
                                  </Typography>
                                  <Grid container spacing={1}>
                                    <Grid item xs={6}>
                                      <Chip 
                                        label={`Savings Rate: ${advancedMetrics.savingsRate}%`}
                                        color="primary"
                                        variant="outlined"
                                        size="small"
                                      />
                                    </Grid>
                                    <Grid item xs={6}>
                                      <Chip 
                                        label={`Expense Ratio: ${advancedMetrics.expenseRatio}%`}
                                        color="secondary"
                                        variant="outlined"
                                        size="small"
                                      />
                                    </Grid>
                                    <Grid item xs={12}>
                                      <Chip 
                                        label={`Budget Status: ${advancedMetrics.budgetHealth}`}
                                        color={advancedMetrics.budgetHealth === 'Healthy' ? 'success' : 'warning'}
                                        variant="outlined"
                                        size="small"
                                      />
                                    </Grid>
                                  </Grid>
                                </Box>
                              </Fade>
                            )}
                          </CardContent>
                        </Card>
                      </Stack>
                    </Slide>
                  </Grid>
                </Grid>
              </Fade>
            )}

            {/* Tab Panel 1: Overview Charts */}
            {activeTab === 1 && (
              <Fade in={true} timeout={600}>
                <Grid container spacing={3}>
                  {/* Financial Overview Summary - Full Screen */}
                  <Grid item xs={12}>
                    <Card elevation={3} sx={{ 
                      background: `linear-gradient(135deg, ${theme.palette.primary.main}15 0%, ${theme.palette.secondary.main}15 100%)`,
                      border: `1px solid ${theme.palette.divider}`,
                      borderRadius: 3,
                      mb: 3
                    }}>
                      <CardHeader
                        title={
                          <Box sx={{ display: 'flex', alignItems: 'center' }}>
                            <PieChartIcon sx={{ mr: 2, color: theme.palette.primary.main }} />
                            Financial Overview
                          </Box>
                        }
                        subheader="Your complete financial snapshot"
                      />
                      <CardContent>
                        <Grid container spacing={3}>
                          {/* Total Income */}
                          <Grid item xs={12} sm={6} md={3}>
                            <Box sx={{ 
                              p: 3,
                              bgcolor: theme.palette.success.main + '10',
                              borderRadius: 3,
                              border: `2px solid ${theme.palette.success.main}20`,
                              textAlign: 'center',
                              transition: 'all 0.3s ease',
                              cursor: 'pointer',
                              '&:hover': {
                                transform: 'translateY(-4px)',
                                boxShadow: `0 8px 32px ${theme.palette.success.main}30`
                              }
                            }}>
                              <MoneyIcon sx={{ 
                                fontSize: 40, 
                                color: theme.palette.success.main,
                                mb: 1
                              }} />
                              <Typography variant="h4" sx={{ 
                                color: theme.palette.success.main,
                                fontWeight: 'bold',
                                mb: 1
                              }}>
                                {formatCurrency(calculateTotalIncome())}
                              </Typography>
                              <Typography variant="body2" sx={{ 
                                color: theme.palette.text.secondary,
                                fontWeight: 'medium'
                              }}>
                                Total Income
                              </Typography>
                            </Box>
                          </Grid>
                          
                          {/* Total Expenses */}
                          <Grid item xs={12} sm={6} md={3}>
                            <Box sx={{ 
                              p: 3,
                              bgcolor: theme.palette.error.main + '10',
                              borderRadius: 3,
                              border: `2px solid ${theme.palette.error.main}20`,
                              textAlign: 'center',
                              transition: 'all 0.3s ease',
                              cursor: 'pointer',
                              '&:hover': {
                                transform: 'translateY(-4px)',
                                boxShadow: `0 8px 32px ${theme.palette.error.main}30`
                              }
                            }}>
                              <TrendingDownIcon sx={{ 
                                fontSize: 40, 
                                color: theme.palette.error.main,
                                mb: 1
                              }} />
                              <Typography variant="h4" sx={{ 
                                color: theme.palette.error.main,
                                fontWeight: 'bold',
                                mb: 1
                              }}>
                                {formatCurrency(calculateTotalExpenses())}
                              </Typography>
                              <Typography variant="body2" sx={{ 
                                color: theme.palette.text.secondary,
                                fontWeight: 'medium'
                              }}>
                                Total Expenses
                              </Typography>
                            </Box>
                          </Grid>
                          
                          {/* Total Savings */}
                          <Grid item xs={12} sm={6} md={3}>
                            <Box sx={{ 
                              p: 3,
                              bgcolor: theme.palette.primary.main + '10',
                              borderRadius: 3,
                              border: `2px solid ${theme.palette.primary.main}20`,
                              textAlign: 'center',
                              transition: 'all 0.3s ease',
                              cursor: 'pointer',
                              '&:hover': {
                                transform: 'translateY(-4px)',
                                boxShadow: `0 8px 32px ${theme.palette.primary.main}30`
                              }
                            }}>
                              <SavingsIcon sx={{ 
                                fontSize: 40, 
                                color: theme.palette.primary.main,
                                mb: 1
                              }} />
                              <Typography variant="h4" sx={{ 
                                color: theme.palette.primary.main,
                                fontWeight: 'bold',
                                mb: 1
                              }}>
                                {formatCurrency(calculateTotalSavings())}
                              </Typography>
                              <Typography variant="body2" sx={{ 
                                color: theme.palette.text.secondary,
                                fontWeight: 'medium'
                              }}>
                                Total Savings
                              </Typography>
                            </Box>
                          </Grid>
                          
                          {/* Remaining */}
                          <Grid item xs={12} sm={6} md={3}>
                            <Box sx={{ 
                              p: 3,
                              bgcolor: remaining >= 0 ? theme.palette.success.main + '10' : theme.palette.warning.main + '10',
                              borderRadius: 3,
                              border: `2px solid ${remaining >= 0 ? theme.palette.success.main : theme.palette.warning.main}20`,
                              textAlign: 'center',
                              transition: 'all 0.3s ease',
                              cursor: 'pointer',
                              '&:hover': {
                                transform: 'translateY(-4px)',
                                boxShadow: `0 8px 32px ${remaining >= 0 ? theme.palette.success.main : theme.palette.warning.main}30`
                              }
                            }}>
                              {remaining >= 0 ? 
                                <TrendingUpIcon sx={{ 
                                  fontSize: 40, 
                                  color: theme.palette.success.main,
                                  mb: 1
                                }} /> :
                                <WarningIcon sx={{ 
                                  fontSize: 40, 
                                  color: theme.palette.warning.main,
                                  mb: 1
                                }} />
                              }
                              <Typography variant="h4" sx={{ 
                                color: remaining >= 0 ? theme.palette.success.main : theme.palette.warning.main,
                                fontWeight: 'bold',
                                mb: 1
                              }}>
                                {formatCurrency(remaining)}
                              </Typography>
                              <Typography variant="body2" sx={{ 
                                color: theme.palette.text.secondary,
                                fontWeight: 'medium'
                              }}>
                                {remaining >= 0 ? 'Remaining' : 'Over Budget'}
                              </Typography>
                            </Box>
                          </Grid>
                        </Grid>
                        
                        {/* Progress Bar */}
                        <Box sx={{ mt: 3 }}>
                          <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>
                            <Typography variant="body2" sx={{ fontWeight: 'medium' }}>
                              Budget Health
                            </Typography>
                            <Typography variant="body2" sx={{ fontWeight: 'medium' }}>
                              {((calculateTotalExpenses() / calculateTotalIncome()) * 100).toFixed(1)}% of income spent
                            </Typography>
                          </Box>
                          <LinearProgress 
                            variant="determinate" 
                            value={Math.min((calculateTotalExpenses() / calculateTotalIncome()) * 100, 100)}
                            sx={{ 
                              height: 12, 
                              borderRadius: 6,
                              backgroundColor: theme.palette.grey[300],
                              '& .MuiLinearProgress-bar': {
                                borderRadius: 6,
                                backgroundColor: remaining >= 0 ? theme.palette.success.main : theme.palette.error.main
                              }
                            }}
                          />
                        </Box>

                        {/* Advanced Metrics */}
                        {showAdvancedMetrics && (
                          <Fade in={true} timeout={600}>
                            <Box sx={{ mt: 3 }}>
                              <Typography variant="subtitle1" gutterBottom>
                                Advanced Metrics
                              </Typography>
                              <Grid container spacing={1}>
                                <Grid item xs={6}>
                                  <Chip 
                                    label={`Savings Rate: ${advancedMetrics.savingsRate}%`}
                                    color="primary"
                                    variant="outlined"
                                    size="small"
                                  />
                                </Grid>
                                <Grid item xs={6}>
                                  <Chip 
                                    label={`Expense Ratio: ${advancedMetrics.expenseRatio}%`}
                                    color="secondary"
                                    variant="outlined"
                                    size="small"
                                  />
                                </Grid>
                                <Grid item xs={12}>
                                  <Chip 
                                    label={`Budget Status: ${advancedMetrics.budgetHealth}`}
                                    color={advancedMetrics.budgetHealth === 'Healthy' ? 'success' : 'warning'}
                                    variant="outlined"
                                    size="small"
                                  />
                                </Grid>
                              </Grid>
                            </Box>
                          </Fade>
                        )}
                      </CardContent>
                    </Card>
                  </Grid>
                </Grid>
              </Fade>
            )}

            {/* Tab Panel 1: Overview Charts */}
            {activeTab === 1 && (
              <Fade in={true} timeout={600}>
                <Grid container spacing={3}>
                  {/* Financial Overview Summary - Full Screen */}
                  <Grid item xs={12}>
                    <Card elevation={3} sx={{ 
                      background: `linear-gradient(135deg, ${theme.palette.primary.main}15 0%, ${theme.palette.secondary.main}15 100%)`,
                      border: `1px solid ${theme.palette.divider}`,
                      borderRadius: 3,
                      mb: 3
                    }}>
                      <CardHeader
                        title={
                          <Box sx={{ display: 'flex', alignItems: 'center' }}>
                            <PieChartIcon sx={{ mr: 2, color: theme.palette.primary.main }} />
                            Financial Overview
                          </Box>
                        }
                        subheader="Your complete financial snapshot"
                      />
                      <CardContent>
                        <Grid container spacing={3}>
                          {/* Total Income */}
                          <Grid item xs={12} sm={6} md={3}>
                            <Box sx={{ 
                              p: 3,
                              bgcolor: theme.palette.success.main + '10',
                              borderRadius: 3,
                              border: `2px solid ${theme.palette.success.main}20`,
                              textAlign: 'center',
                              transition: 'all 0.3s ease',
                              cursor: 'pointer',
                              '&:hover': {
                                transform: 'translateY(-4px)',
                                boxShadow: `0 8px 32px ${theme.palette.success.main}30`
                              }
                            }}>
                              <MoneyIcon sx={{ 
                                fontSize: 40, 
                                color: theme.palette.success.main,
                                mb: 1
                              }} />
                              <Typography variant="h4" sx={{ 
                                color: theme.palette.success.main,
                                fontWeight: 'bold',
                                mb: 1
                              }}>
                                {formatCurrency(calculateTotalIncome())}
                              </Typography>
                              <Typography variant="body2" sx={{ 
                                color: theme.palette.text.secondary,
                                fontWeight: 'medium'
                              }}>
                                Total Income
                              </Typography>
                            </Box>
                          </Grid>
                          
                          {/* Total Expenses */}
                          <Grid item xs={12} sm={6} md={3}>
                            <Box sx={{ 
                              p: 3,
                              bgcolor: theme.palette.error.main + '10',
                              borderRadius: 3,
                              border: `2px solid ${theme.palette.error.main}20`,
                              textAlign: 'center',
                              transition: 'all 0.3s ease',
                              cursor: 'pointer',
                              '&:hover': {
                                transform: 'translateY(-4px)',
                                boxShadow: `0 8px 32px ${theme.palette.error.main}30`
                              }
                            }}>
                              <TrendingDownIcon sx={{ 
                                fontSize: 40, 
                                color: theme.palette.error.main,
                                mb: 1
                              }} />
                              <Typography variant="h4" sx={{ 
                                color: theme.palette.error.main,
                                fontWeight: 'bold',
                                mb: 1
                              }}>
                                {formatCurrency(calculateTotalExpenses())}
                              </Typography>
                              <Typography variant="body2" sx={{ 
                                color: theme.palette.text.secondary,
                                fontWeight: 'medium'
                              }}>
                                Total Expenses
                              </Typography>
                            </Box>
                          </Grid>
                          
                          {/* Total Savings */}
                          <Grid item xs={12} sm={6} md={3}>
                            <Box sx={{ 
                              p: 3,
                              bgcolor: theme.palette.primary.main + '10',
                              borderRadius: 3,
                              border: `2px solid ${theme.palette.primary.main}20`,
                              textAlign: 'center',
                              transition: 'all 0.3s ease',
                              cursor: 'pointer',
                              '&:hover': {
                                transform: 'translateY(-4px)',
                                boxShadow: `0 8px 32px ${theme.palette.primary.main}30`
                              }
                            }}>
                              <SavingsIcon sx={{ 
                                fontSize: 40, 
                                color: theme.palette.primary.main,
                                mb: 1
                              }} />
                              <Typography variant="h4" sx={{ 
                                color: theme.palette.primary.main,
                                fontWeight: 'bold',
                                mb: 1
                              }}>
                                {formatCurrency(calculateTotalSavings())}
                              </Typography>
                              <Typography variant="body2" sx={{ 
                                color: theme.palette.text.secondary,
                                fontWeight: 'medium'
                              }}>
                                Total Savings
                              </Typography>
                            </Box>
                          </Grid>
                          
                          {/* Remaining */}
                          <Grid item xs={12} sm={6} md={3}>
                            <Box sx={{ 
                              p: 3,
                              bgcolor: remaining >= 0 ? theme.palette.success.main + '10' : theme.palette.warning.main + '10',
                              borderRadius: 3,
                              border: `2px solid ${remaining >= 0 ? theme.palette.success.main : theme.palette.warning.main}20`,
                              textAlign: 'center',
                              transition: 'all 0.3s ease',
                              cursor: 'pointer',
                              '&:hover': {
                                transform: 'translateY(-4px)',
                                boxShadow: `0 8px 32px ${remaining >= 0 ? theme.palette.success.main : theme.palette.warning.main}30`
                              }
                            }}>
                              {remaining >= 0 ? 
                                <TrendingUpIcon sx={{ 
                                  fontSize: 40, 
                                  color: theme.palette.success.main,
                                  mb: 1
                                }} /> :
                                <WarningIcon sx={{ 
                                  fontSize: 40, 
                                  color: theme.palette.warning.main,
                                  mb: 1
                                }} />
                              }
                              <Typography variant="h4" sx={{ 
                                color: remaining >= 0 ? theme.palette.success.main : theme.palette.warning.main,
                                fontWeight: 'bold',
                                mb: 1
                              }}>
                                {formatCurrency(remaining)}
                              </Typography>
                              <Typography variant="body2" sx={{ 
                                color: theme.palette.text.secondary,
                                fontWeight: 'medium'
                              }}>
                                {remaining >= 0 ? 'Remaining' : 'Over Budget'}
                              </Typography>
                            </Box>
                          </Grid>
                        </Grid>
                        
                        {/* Progress Bar */}
                        <Box sx={{ mt: 3 }}>
                          <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>
                            <Typography variant="body2" sx={{ fontWeight: 'medium' }}>
                              Budget Health
                            </Typography>
                            <Typography variant="body2" sx={{ fontWeight: 'medium' }}>
                              {((calculateTotalExpenses() / calculateTotalIncome()) * 100).toFixed(1)}% of income spent
                            </Typography>
                          </Box>
                          <LinearProgress 
                            variant="determinate" 
                            value={Math.min((calculateTotalExpenses() / calculateTotalIncome()) * 100, 100)}
                            sx={{ 
                              height: 12, 
                              borderRadius: 6,
                              backgroundColor: theme.palette.grey[300],
                              '& .MuiLinearProgress-bar': {
                                borderRadius: 6,
                                backgroundColor: remaining >= 0 ? theme.palette.success.main : theme.palette.error.main
                              }
                            }}
                          />
                        </Box>

                        {/* Advanced Metrics */}
                        {showAdvancedMetrics && (
                          <Fade in={true} timeout={600}>
                            <Box sx={{ mt: 3 }}>
                              <Typography variant="subtitle1" gutterBottom>
                                Advanced Metrics
                              </Typography>
                              <Grid container spacing={1}>
                                <Grid item xs={6}>
                                  <Chip 
                                    label={`Savings Rate: ${advancedMetrics.savingsRate}%`}
                                    color="primary"
                                    variant="outlined"
                                    size="small"
                                  />
                                </Grid>
                                <Grid item xs={6}>
                                  <Chip 
                                    label={`Expense Ratio: ${advancedMetrics.expenseRatio}%`}
                                    color="secondary"
                                    variant="outlined"
                                    size="small"
                                  />
                                </Grid>
                                <Grid item xs={12}>
                                  <Chip 
                                    label={`Budget Status: ${advancedMetrics.budgetHealth}`}
                                    color={advancedMetrics.budgetHealth === 'Healthy' ? 'success' : 'warning'}
                                    variant="outlined"
                                    size="small"
                                  />
                                </Grid>
                              </Grid>
                            </Box>
                          </Fade>
                        )}
                      </CardContent>
                    </Card>
                  </Grid>
                </Grid>
              </Fade>
            )}

            {/* Tab Panel 2: Trends */}
            {activeTab === 2 && (
              <Fade in={true} timeout={600}>
                <Grid container spacing={3}>
                  {trendChartData && (
                    <Grid item xs={12}>
                      <Card elevation={3} sx={{ 
                        background: `linear-gradient(135deg, ${theme.palette.background.paper} 0%, ${theme.palette.grey[50]} 100%)`,
                        borderRadius: 3,
                        overflow: 'hidden',
                        border: `1px solid ${theme.palette.divider}`,
                        transition: 'all 0.3s ease',
                        '&:hover': {
                          transform: 'translateY(-2px)',
                          boxShadow: `0 12px 40px ${theme.palette.info.main}20`
                        }
                      }}>
                        <CardHeader
                          title={
                            <Box sx={{ display: 'flex', alignItems: 'center' }}>
                              <TimelineIcon sx={{ mr: 1, color: theme.palette.info.main }} />
                              Budget Trends
                            </Box>
                          }
                          subheader="Track your financial progress over time"
                        />
                        <CardContent>
                          <Chart
                            type="line"
                            data={trendChartData}
                            options={getChartOptions('line')}
                            height={600}
                          />
                        </CardContent>
                      </Card>
                    </Grid>
                  )}
                </Grid>
              </Fade>
            )}

            {/* Tab Panel 3: Analytics */}
            {activeTab === 3 && (
              <Fade in={true} timeout={600}>
                <Grid container spacing={3}>
                  <Grid item xs={12}>
                    <Card elevation={3} sx={{ 
                      borderRadius: 3,
                      background: `linear-gradient(135deg, ${theme.palette.background.paper} 0%, ${theme.palette.grey[50]} 100%)`,
                      border: `1px solid ${theme.palette.divider}`,
                      transition: 'all 0.3s ease',
                      '&:hover': {
                        transform: 'translateY(-2px)',
                        boxShadow: `0 12px 40px ${theme.palette.warning.main}20`
                      }
                    }}>
                      <CardHeader
                        title={
                          <Box sx={{ display: 'flex', alignItems: 'center' }}>
                            <AnalyticsIcon sx={{ mr: 1, color: theme.palette.warning.main }} />
                            Budget Analytics
                          </Box>
                        }
                        subheader="Detailed insights into your financial habits"
                      />
                      <CardContent>
                        <Grid container spacing={4}>
                          <Grid item xs={12} md={6}>
                            <Typography variant="h6" gutterBottom>
                              Key Metrics

                            </Typography>
                            <Stack spacing={3}>
                              <Box>
                                <Typography variant="subtitle2" sx={{ mb: 1 }}>Savings Rate</Typography>
                                <LinearProgress 
                                  variant="determinate" 
                                  value={parseFloat(advancedMetrics.savingsRate)}
                                  sx={{ height: 12, borderRadius: 6 }}
                                />
                                <Typography variant="caption" color="textSecondary">
                                  {advancedMetrics.savingsRate}% of income saved
                                </Typography>
                              </Box>
                              <Box>
                                <Typography variant="subtitle2" sx={{ mb: 1 }}>Expense Ratio</Typography>
                                <LinearProgress 
                                  variant="determinate" 
                                  value={parseFloat(advancedMetrics.expenseRatio)}
                                  sx={{ height: 12, borderRadius: 6 }}
                                />
                                <Typography variant="caption" color="textSecondary">
                                  {advancedMetrics.expenseRatio}% of income spent on expenses
                                </Typography>
                              </Box>
                              <Box>
                                <Typography variant="subtitle2" sx={{ mb: 1 }}>Budget Status</Typography>
                                <Chip 
                                  label={advancedMetrics.budgetHealth}
                                  color={advancedMetrics.budgetHealth === 'Healthy' ? 'success' : 'warning'}
                                  variant="outlined"
                                  size="small"
                                  sx={{ 
                                    width: '100%',
                                    justifyContent: 'space-between',
                                    padding: '8px 12px',
                                    borderRadius: 2,
                                    border: `1px solid ${advancedMetrics.budgetHealth === 'Healthy' ? theme.palette.success.main : theme.palette.warning.main}`
                                  }}
                                />
                              </Box>
                            </Stack>
                          </Grid>
                          <Grid item xs={12} md={6}>
                            <Typography variant="h6" gutterBottom>
                              Debt Payoff Projections
                            </Typography>
                            {debtProjectionData && (
                              <Card sx={{ borderRadius: 2, overflow: 'hidden' }}>
                                <Chart
                                  type="line"
                                  data={debtProjectionData}
                                  options={getChartOptions('line')}
                                  height={300}
                                />
                              </Card>
                            )}
                          </Grid>
                        </Grid>
                      </CardContent>
                    </Card>
                  </Grid>
                </Grid>
              </Fade>
            )}
          </Box>
        </Box>
      </Fade>

      {/* Snackbar for success messages */}
      <Snackbar
                              onClick={(e) => {
                                e.stopPropagation();
                                e.preventDefault();
                                console.log('Button clicked');
                                console.log('Current activeTab:', activeTab);
                                console.log('Current showAddDebtDialog:', showAddDebtDialog);
                                handleAddDebt();
                              }}
                              sx={{
                                borderRadius: 2,
                                '&:hover': {
                                  transform: 'translateY(-2px)',
                                  boxShadow: theme.shadows[4]
                                }
                              }}
                            >
                              Add Debt
                            </Button>
                            <Button
                              variant="outlined"
                              onClick={() => {
                                console.log('Test dialog button clicked');
                                setShowTestDialog(true);
                              }}
                              sx={{ ml: 1 }}
                            >
                              Test Dialog
                            </Button>
                          </Box>
                        }
                        subheader="Manage your debts and plan your payoff strategy"
                      />
                    </Card>
                  </Grid>

                  {/* Debt Planning Sub-tabs */}
                  <Grid item xs={12}>
                    <Card elevation={2}>
                      <Tabs 
                        value={debtActiveTab} 
                        onChange={(e, v) => setDebtActiveTab(v)}
                        variant="fullWidth"
                        textColor="primary"
                        indicatorColor="primary"
                      >
                        <Tab label="Budget Projection" />
                        <Tab label="Debt Overview" />
                        <Tab label="Payoff Strategies" />
                      </Tabs>
                    </Card>
                  </Grid>

                  {/* Debt Sub-tab Content */}
                  {debtActiveTab === 0 && debtProjectionData && (
                    <Grid item xs={12}>
                      <Card elevation={3} sx={{ borderRadius: 3 }}>
                        <CardHeader
                          title="Budget Projection with Debt Payments"
                          subheader="See how debt payments affect your monthly budget"
                        />
                        <CardContent>
                          <Chart
                            type="line"
                            data={debtProjectionData}
                            options={getChartOptions('line')}
                            height={400}
                          />
                        </CardContent>
                      </Card>
                    </Grid>
                  )}

                  {debtActiveTab === 1 && (
                    <Grid item xs={12}>
                      <Card elevation={3} sx={{ borderRadius: 3 }}>
                        <CardHeader
                          title="Debt Overview"
                          subheader="Track all your debts in one place"
                        />
                        <CardContent>
                          {debts.length === 0 ? (
                            <Box sx={{ textAlign: 'center', py: 4 }}>
                              <Typography variant="h6" color="textSecondary">
                                No debts added yet
                              </Typography>
                              <Typography variant="body2" color="textSecondary" sx={{ mb: 2 }}>
                                Click "Add Debt" to start managing your debts
                              </Typography>
                            </Box>
                          ) : (
                            <Grid container spacing={3}>
                              {debts.map((debt, index) => (
                                <Grid item xs={12} md={6} key={debt.id}>
                                  <Card elevation={2} sx={{ 
                                    borderRadius: 3,
                                    border: `1px solid ${theme.palette.divider}`,
                                    '&:hover': {
                                      transform: 'translateY(-2px)',
                                      boxShadow: theme.shadows[4]
                                    }
                                  }}>
                                    <CardContent>
                                      <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
                                        {getDebtTypeIcon(debt.type)}
                                        <Box sx={{ ml: 2, flex: 1 }}>
                                          <Typography variant="h6">{debt.name}</Typography>
                                          <Typography variant="body2" color="textSecondary">
                                            {debt.type.charAt(0).toUpperCase() + debt.type.slice(1)} Debt
                                          </Typography>
                                        </Box>
                                        <IconButton 
                                          onClick={() => handleRemoveDebt(debt.id)}
                                          color="error"
                                          size="small"
                                        >
                                          <DeleteIcon />
                                        </IconButton>
                                      </Box>
                                      
                                      <Grid container spacing={2}>
                                        <Grid item xs={6}>
                                          <Typography variant="body2" color="textSecondary">
                                            Amount
                                          </Typography>
                                          <Typography variant="h6">
                                            {formatCurrency(debt.amount)}
                                          </Typography>
                                        </Grid>
                                        <Grid item xs={6}>
                                          <Typography variant="body2" color="textSecondary">
                                            Interest Rate
                                          </Typography>
                                          <Typography variant="h6">
                                            {debt.interestRate}%
                                          </Typography>
                                        </Grid>
                                        <Grid item xs={6}>
                                          <Typography variant="body2" color="textSecondary">
                                            Min Payment
                                          </Typography>
                                          <Typography variant="h6">
                                            {formatCurrency(debt.minimumPayment)}
                                          </Typography>
                                        </Grid>
                                        <Grid item xs={6}>
                                          <Typography variant="body2" color="textSecondary">
                                            Due Date
                                          </Typography>
                                          <Typography variant="h6">
                                            {debt.dueDate}
                                          </Typography>
                                        </Grid>
                                      </Grid>
                                      
                                      <Box sx={{ mt: 3 }}>
                                        <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>
                                          <Typography variant="body2">
                                            Progress
                                          </Typography>
                                          <Typography variant="body2">
                                            {getDebtProgress(debt).toFixed(1)}%
                                          </Typography>
                                        </Box>
                                        <LinearProgress 
                                          variant="determinate" 
                                          value={getDebtProgress(debt)}
                                          sx={{ height: 8, borderRadius: 4 }}
                                        />
                                      </Box>
                                    </CardContent>
                                  </Card>
                                </Grid>
                              ))}
                            </Grid>
                          )}
                        </CardContent>
                      </Card>
                    </Grid>
                  )}

                  {debtActiveTab === 2 && (
                    <Grid item xs={12}>
                      <Card elevation={3} sx={{ borderRadius: 3 }}>
                        <CardHeader
                          title="Payoff Strategies"
                          subheader="Choose the best strategy to pay off your debts"
                        />
                        <CardContent>
                          <Grid container spacing={3}>
                            <Grid item xs={12} md={6}>
                              <Card elevation={2} sx={{ 
                                borderRadius: 3,
                                border: selectedPayoffStrategy === 'snowball' ? `2px solid ${theme.palette.primary.main}` : `1px solid ${theme.palette.divider}`,
                                cursor: 'pointer',
                                '&:hover': {
                                  transform: 'translateY(-2px)',
                                  boxShadow: theme.shadows[4]
                                }
                              }}
                              onClick={() => setSelectedPayoffStrategy('snowball')}
                              >
                                <CardContent>
                                  <Typography variant="h6" gutterBottom>
                                    Debt Snowball
                                  </Typography>
                                  <Typography variant="body2" color="textSecondary" sx={{ mb: 2 }}>
                                    Pay off debts from smallest to largest balance
                                  </Typography>
                                  {payoffStrategies.snowball && (
                                    <Box>
                                      <Typography variant="body2">
                                        <strong>Total Time:</strong> {payoffStrategies.snowball.totalMonths} months
                                      </Typography>
                                      <Typography variant="body2">
                                        <strong>Total Interest:</strong> {formatCurrency(payoffStrategies.snowball.totalInterestPaid)}
                                      </Typography>
                                      <Typography variant="body2">
                                        <strong>Total Paid:</strong> {formatCurrency(payoffStrategies.snowball.totalAmountPaid)}
                                      </Typography>
                                    </Box>
                                  )}
                                </CardContent>
                              </Card>
                            </Grid>
                            
                            <Grid item xs={12} md={6}>
                              <Card elevation={2} sx={{ 
                                borderRadius: 3,
                                border: selectedPayoffStrategy === 'avalanche' ? `2px solid ${theme.palette.primary.main}` : `1px solid ${theme.palette.divider}`,
                                cursor: 'pointer',
                                '&:hover': {
                                  transform: 'translateY(-2px)',
                                  boxShadow: theme.shadows[4]
                                }
                              }}
                              onClick={() => setSelectedPayoffStrategy('avalanche')}
                              >
                                <CardContent>
                                  <Typography variant="h6" gutterBottom>
                                    Debt Avalanche
                                  </Typography>
                                  <Typography variant="body2" color="textSecondary" sx={{ mb: 2 }}>
                                    Pay off debts from highest to lowest interest rate
                                  </Typography>
                                  {payoffStrategies.avalanche && (
                                    <Box>
                                      <Typography variant="body2">
                                        <strong>Total Time:</strong> {payoffStrategies.avalanche.totalMonths} months
                                      </Typography>
                                      <Typography variant="body2">
                                        <strong>Total Interest:</strong> {formatCurrency(payoffStrategies.avalanche.totalInterestPaid)}
                                      </Typography>
                                      <Typography variant="body2">
                                        <strong>Total Paid:</strong> {formatCurrency(payoffStrategies.avalanche.totalAmountPaid)}
                                      </Typography>
                                    </Box>
                                  )}
                                </CardContent>
                              </Card>
                            </Grid>
                          </Grid>
                        </CardContent>
                      </Card>
                    </Grid>
                  )}
                </Grid>
              </Fade>
            )}
          </Box>
        </Box>
      </Fade>

      {/* Snackbar for success messages */}
      <Snackbar 
        open={showSuccessSnackbar} 
        autoHideDuration={6000} 
        onClose={() => setShowSuccessSnackbar(false)}
        anchorOrigin={{ vertical: 'top', horizontal: 'right' }}
      >
        <Alert onClose={() => setShowSuccessSnackbar(false)} severity="success" sx={{ width: '100%' }}>
          {successMessage}
        </Alert>
      </Snackbar>

      {/* Snackbar for error messages */}
      <Snackbar 
        open={showErrorSnackbar} 
        autoHideDuration={6000} 
        onClose={() => setShowErrorSnackbar(false)}
        anchorOrigin={{ vertical: 'top', horizontal: 'right' }}
      >
        <Alert onClose={() => setShowErrorSnackbar(false)} severity="error" sx={{ width: '100%' }}>
          {error}
        </Alert>
      </Snackbar>

      {/* Filter Menu */}
      <Menu
        anchorEl={filterAnchorEl}
        open={Boolean(filterAnchorEl)}
        onClose={handleFilterMenuClose}
        PaperProps={{
          sx: {
            width: 250,
            borderRadius: 2,
            boxShadow: theme.shadows[4],
            mt: 1
          }
        }}
      >
        <MenuItem onClick={handleFilterMenuClose}>
          <Typography variant="subtitle1" sx={{ fontWeight: 'medium' }}>
            Filter Options
          </Typography>
        </MenuItem>
        <Divider sx={{ my: 1 }} />
        <MenuItem onClick={handleFilterMenuClose}>
          <Typography variant="body2" sx={{ color: theme.palette.text.secondary }}>
            Coming soon...
          </Typography>
        </MenuItem>
      </Menu>

      {/* Sidebar - Settings */}
      <Drawer
        anchor="right"
        open={showSidebar}
        onClose={toggleSidebar}
        PaperProps={{
          sx: {
            width: 300,
            bgcolor: theme.palette.background.paper,
            borderLeft: `1px solid ${theme.palette.divider}`,
            borderRadius: '0 2px 2px 0',
            boxShadow: theme.shadows[4]
          }
        }}
      >
        <Box sx={{ p: 3, height: '100%', display: 'flex', flexDirection: 'column' }}>
          <Typography variant="h6" sx={{ fontWeight: 'bold', mb: 2 }}>
            Settings
          </Typography>
          
          <Divider sx={{ mb: 2 }} />

          {/* Theme Toggle */}
          <FormControlLabel
            control={
              <Switch
                checked={isDarkMode}
                onChange={() => {}}
                color="primary"
              />
            }
            label="Dark Mode"
            sx={{ mb: 2 }}
          />

          {/* Notifications */}
          <Typography variant="subtitle1" sx={{ fontWeight: 'medium', mb: 1 }}>
            Notifications
          </Typography>
          <FormControlLabel
            control={
              <Switch
                checked={true}
                onChange={() => {}}
                color="primary"
              />
            }
            label="Enable Notifications"
            sx={{ mb: 2 }}
          />
          <FormControlLabel
            control={
              <Switch
                checked={false}
                onChange={() => {}}
                color="primary"
              />
            }
            label="Weekly Summary"
            sx={{ mb: 2 }}
          />

          {/* Account Settings */}
          <Typography variant="subtitle1" sx={{ fontWeight: 'medium', mb: 1, mt: 3 }}>
            Account Settings
          </Typography>
          <Button
            variant="outlined"
            color="primary"
            size="small"
            sx={{ borderRadius: 2, width: '100%', justifyContent: 'flex-start', px: 2 }}
            startIcon={<AccountCircle />}
          >
            Profile
          </Button>
          <Button
            variant="outlined"
            color="primary"
            size="small"
            sx={{ borderRadius: 2, width: '100%', justifyContent: 'flex-start', px: 2, mt: 1 }}
            startIcon={<LockIcon />}
          >
            Security
          </Button>
        </Box>
      </Drawer>
    </Box>
  );
}

export default MonthlyBudget;