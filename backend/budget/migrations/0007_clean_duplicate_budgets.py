# Generated by Django 5.2.4 on 2025-07-28 15:30

from django.db import migrations


def clean_duplicate_budgets(apps, schema_editor):
    """
    Clean up duplicate budget records by keeping only the most recent one
    for each user/month/year combination
    """
    Budget = apps.get_model('budget', 'Budget')
    
    # Get all budgets grouped by user, month, year
    from django.db.models import Max
    from collections import defaultdict
    
    # Find duplicates
    duplicates = defaultdict(list)
    for budget in Budget.objects.all():
        key = (budget.user_id, budget.month, budget.year)
        duplicates[key].append(budget)
    
    # Keep only the most recent budget for each combination
    for key, budgets in duplicates.items():
        if len(budgets) > 1:
            # Sort by updated_at and keep the most recent
            budgets.sort(key=lambda x: x.updated_at, reverse=True)
            # Delete all but the most recent
            for budget in budgets[1:]:
                budget.delete()
            print(f"Cleaned up {len(budgets) - 1} duplicate budgets for user {key[0]}, month {key[1]}, year {key[2]}")


def reverse_clean_duplicate_budgets(apps, schema_editor):
    """
    No reverse operation needed for cleaning duplicates
    """
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('budget', '0005_rename_savings_budget_savings_items_budget_month_and_more'),
    ]

    operations = [
        migrations.RunPython(clean_duplicate_budgets, reverse_clean_duplicate_budgets),
    ]
